from datetime import datetime

class Usuario:
    def __init__(self, id, nome, senha):
        self.__id = id
        self.__nome = nome
        self.__senha = senha

    def get_id(self):
        return self.__id

    def get_nome(self):
        return self.__nome

    def verificar_senha(self, senha):
        return self.__senha == senha


class Maqueiro(Usuario):
    def __init__(self, id, nome, senha):
        super().__init__(id, nome, senha)
        self.__solicitacoes = []

    def aceitar_solicitacao(self, solicitacao):
        solicitacao.set_status("Em transporte")
        solicitacao.get_paciente().set_status("Em transporte")
        self.__solicitacoes.append(solicitacao)

    def recusar_solicitacao(self, solicitacao):
        solicitacao.set_status("Recusada")

    def registrar_incidente(self, solicitacao, descricao):
        solicitacao.adicionar_incidente(descricao)

    def get_solicitacoes(self):
        return self.__solicitacoes


class Paciente:
    def __init__(self, id, nome, localizacao, prioridade):
        self.__id = id
        self.__nome = nome
        self.__localizacao = localizacao
        self.__status = "Aguardando transporte"
        self.__prioridade = prioridade

    def get_id(self):
        return self.__id

    def get_nome(self):
        return self.__nome

    def get_localizacao(self):
        return self.__localizacao

    def get_status(self):
        return self.__status

    def set_status(self, status):
        self.__status = status

    def get_prioridade(self):
        return self.__prioridade


class SolicitacaoTransporte:
    def __init__(self, paciente):
        self.__paciente = paciente
        self.__data_hora = datetime.now()
        self.__status = "Pendente"
        self.__incidentes = []

    def get_paciente(self):
        return self.__paciente

    def get_data_hora(self):
        return self.__data_hora

    def get_status(self):
        return self.__status

    def set_status(self, status):
        self.__status = status

    def get_incidentes(self):
        return self.__incidentes

    def adicionar_incidente(self, descricao):
        self.__incidentes.append(descricao)


class SistemaTransporte:
    def __init__(self):
        self.__pacientes = []
        self.__solicitacoes = []
        self.__maqueiros = []
        self.__usuarios_autenticados = []

    def adicionar_paciente(self, id, nome, localizacao, prioridade):
        paciente = Paciente(id, nome, localizacao, prioridade)
        self.__pacientes.append(paciente)
        return paciente

    def buscar_paciente(self, id_paciente):
        return next((p for p in self.__pacientes if p.get_id() == id_paciente), None)

    def adicionarSolicitacaoTransporte(self, paciente):
        solicitacao = SolicitacaoTransporte(paciente)
        self.solicitacoes.append(solicitacao)
        return solicitacao

    def criar_solicitacao(self, paciente):
        solicitacao = SolicitacaoTransporte(paciente)
        self.__solicitacoes.append(solicitacao)
        return solicitacao

    def adicionar_maqueiro(self, id, nome, senha):
        maqueiro = Maqueiro(id, nome, senha)
        self.__maqueiros.append(maqueiro)
        return maqueiro

    def listar_pacientes(self):
        if not self.__pacientes:
            print("Nenhum paciente cadastrado.")
        else:
            for paciente in self.__pacientes:
                print(f"ID: {paciente.get_id()}, Nome: {paciente.get_nome()}, Localização: {paciente.get_localizacao()}, Prioridade: {paciente.get_prioridade()}")

    def listar_solicitacoes_pendentes(self):
        return [sol for sol in self.__solicitacoes if sol.get_status() == "Pendente"]

    def listar_todas_solicitacoes(self):
        return self.__solicitacoes

    def autenticar_usuario(self, id, nome, senha):
        for maqueiro in self.__maqueiros:
            if maqueiro.get_id() == id and maqueiro.get_nome() == nome and maqueiro.verificar_senha(senha):
                self.__usuarios_autenticados.append(maqueiro)
                return maqueiro
        return None

    def listar_historico_paciente(self, paciente_id):
        historico = [sol for sol in self.__solicitacoes if sol.get_paciente().get_id() == paciente_id]
        return historico


def main():
    sistema = SistemaTransporte()

    # Adicionar maqueiro "Mateus"
    sistema.adicionar_maqueiro(1, "mateus", "123")

    while True:
        try:
            # Autenticar maqueiro
            id_maqueiro = int(input("ID do maqueiro: "))
            nome_maqueiro = input("Nome do maqueiro: ")
            senha_maqueiro = input("Senha do maqueiro: ")

            maqueiro = sistema.autenticar_usuario(id_maqueiro, nome_maqueiro, senha_maqueiro)
            if maqueiro:
                print("Autenticação bem-sucedida!")
                
                while True:
                    print("\nMenu:")
                    print("1. Adicionar Paciente")
                    print("2. Criar Solicitação de Transporte")
                    print("3. Listar Solicitações Pendentes")
                    print("4. Listar Todas as Solicitações")
                    print("5. Aceitar Solicitação")
                    print("6. Recusar Solicitação")
                    print("7. Registrar Incidente")
                    print("8. Ver Histórico de Solicitações de um Paciente")
                    print("9. Verificar Histórico de Novo Paciente")
                    print("10. Listar Pacientes")
                    print("11. Sair")
                    
                    try:
                        opcao = int(input("Escolha uma opção: "))
                        
                        if opcao == 1:
                            id_paciente = int(input("ID do paciente: "))
                            nome_paciente = input("Nome do paciente: ")
                            localizacao_paciente = input("Localização do paciente: ")
                            prioridade_paciente = input("Prioridade do paciente: ")
                            paciente = sistema.adicionar_paciente(id_paciente, nome_paciente, localizacao_paciente, prioridade_paciente)
                            print("Paciente adicionado com sucesso!")
                            
                        elif opcao == 2:
                            id_paciente = int(input("ID do paciente para solicitação: "))
                            paciente = sistema.buscar_paciente(id_paciente)
                            if paciente:
                                sistema.criar_solicitacao(paciente)
                                print("Solicitação de transporte criada com sucesso!")
                            else:
                                print("Paciente não encontrado!")
                                
                        elif opcao == 3:
                            solicitacoes_pendentes = sistema.listar_solicitacoes_pendentes()
                            if solicitacoes_pendentes:
                                for solicitacao in solicitacoes_pendentes:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhuma solicitação pendente.")
                                
                        elif opcao == 4:
                            solicitacoes = sistema.listar_todas_solicitacoes()
                            if solicitacoes:
                                for solicitacao in solicitacoes:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhuma solicitação encontrada.")
                                
                        elif opcao == 5:
                            id_solicitacao = int(input("ID da solicitação para aceitar: "))
                            solicitacao = next((s for s in sistema.listar_todas_solicitacoes() if s.get_id() == id_solicitacao), None)
                            if solicitacao:
                                maqueiro.aceitar_solicitacao(solicitacao)
                                print("Solicitação aceita com sucesso!")
                            else:
                                print("Solicitação não encontrada!")
                                
                        elif opcao == 6:
                            id_solicitacao = int(input("ID da solicitação para recusar: "))
                            solicitacao = next((s for s in sistema.listar_todas_solicitacoes() if s.get_id() == id_solicitacao), None)
                            if solicitacao:
                                maqueiro.recusar_solicitacao(solicitacao)
                                print("Solicitação recusada com sucesso!")
                            else:
                                print("Solicitação não encontrada!")
                                
                        elif opcao == 7:
                            id_solicitacao = int(input("ID da solicitação para registrar incidente: "))
                            descricao_incidente = input("Descrição do incidente: ")
                            solicitacao = next((s for s in sistema.listar_todas_solicitacoes() if s.get_id() == id_solicitacao), None)
                            if solicitacao:
                                maqueiro.registrar_incidente(solicitacao, descricao_incidente)
                                print("Incidente registrado com sucesso!")
                            else:
                                print("Solicitação não encontrada!")
                                
                        elif opcao == 8:
                            id_paciente = int(input("ID do paciente para ver histórico: "))
                            historico = sistema.listar_historico_paciente(id_paciente)
                            if historico:
                                for solicitacao in historico:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} em {solicitacao.get_data_hora()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhum histórico encontrado para o paciente.")
                        
                        elif opcao == 9:
                            id_paciente = int(input("ID do paciente para verificar histórico: "))
                            historico = sistema.listar_historico_paciente(id_paciente)
                            if historico:
                                for solicitacao in historico:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} em {solicitacao.get_data_hora()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhum histórico encontrado para o paciente.")
                                
                        elif opcao == 10:
                            sistema.listar_pacientes()
                            
                        elif opcao == 11:
                            print("Saindo do sistema...")
                            break
                            
                        else:
                            print("Opção inválida!")
                    except ValueError:
                        print("Entrada inválida! Por favor, insira um número.")
            else:
                print("Falha na autenticação!")
        except ValueError:
            print("Entrada inválida! Por favor, insira um número.")


if __name__ == "__main__":
    main()



-----------------------------------------------------------------------------------------------------------


from datetime import datetime

class Usuario:
    def __init__(self, id, nome, senha):
        self.__id = id
        self.__nome = nome
        self.__senha = senha

    def get_id(self):
        return self.__id

    def get_nome(self):
        return self.__nome

    def verificar_senha(self, senha):
        return self.__senha == senha


class Maqueiro(Usuario):
    def __init__(self, id, nome, senha):
        super().__init__(id, nome, senha)
        self.__solicitacoes = []

    def aceitar_solicitacao(self, solicitacao):
        solicitacao.set_status("Em transporte")
        solicitacao.get_paciente().set_status("Em transporte")
        self.__solicitacoes.append(solicitacao)

    def recusar_solicitacao(self, solicitacao):
        solicitacao.set_status("Recusada")

    def registrar_incidente(self, solicitacao, descricao):
        solicitacao.adicionar_incidente(descricao)

    def get_solicitacoes(self):
        return self.__solicitacoes


class Paciente:
    def __init__(self, id, nome, localizacao, prioridade):
        self.__id = id
        self.__nome = nome
        self.__localizacao = localizacao
        self.__status = "Aguardando transporte"
        self.__prioridade = prioridade

    def get_id(self):
        return self.__id

    def get_nome(self):
        return self.__nome

    def get_localizacao(self):
        return self.__localizacao

    def get_status(self):
        return self.__status

    def set_status(self, status):
        self.__status = status

    def get_prioridade(self):
        return self.__prioridade


class SolicitacaoTransporte:
    def __init__(self, paciente):
        self.__paciente = paciente
        self.__data_hora = datetime.now()
        self.__status = "Pendente"
        self.__incidentes = []

    def get_paciente(self):
        return self.__paciente

    def get_data_hora(self):
        return self.__data_hora

    def get_status(self):
        return self.__status

    def set_status(self, status):
        self.__status = status

    def get_incidentes(self):
        return self.__incidentes

    def adicionar_incidente(self, descricao):
        self.__incidentes.append(descricao)


class SistemaTransporte:
    def __init__(self):
        self.__pacientes = []
        self.__solicitacoes = []
        self.__maqueiros = []
        self.__usuarios_autenticados = []

    def adicionar_paciente(self, id, nome, localizacao, prioridade):
        paciente = Paciente(id, nome, localizacao, prioridade)
        self.__pacientes.append(paciente)
        return paciente

    def buscar_paciente(self, id_paciente):
        return next((p for p in self.__pacientes if p.get_id() == id_paciente), None)

    def criar_solicitacao(self, paciente):
        solicitacao = SolicitacaoTransporte(paciente)
        self.__solicitacoes.append(solicitacao)
        return solicitacao

    def adicionar_maqueiro(self, id, nome, senha):
        maqueiro = Maqueiro(id, nome, senha)
        self.__maqueiros.append(maqueiro)
        return maqueiro

    def listar_pacientes(self):
        if not self.__pacientes:
            print("Nenhum paciente cadastrado.")
        else:
            for paciente in self.__pacientes:
                print(f"ID: {paciente.get_id()}, Nome: {paciente.get_nome()}, Localização: {paciente.get_localizacao()}, Prioridade: {paciente.get_prioridade()}")

    def listar_solicitacoes_pendentes(self):
        return [sol for sol in self.__solicitacoes if sol.get_status() == "Pendente"]

    def listar_todas_solicitacoes(self):
        return self.__solicitacoes

    def autenticar_usuario(self, id, nome, senha):
        for maqueiro in self.__maqueiros:
            if maqueiro.get_id() == id and maqueiro.get_nome() == nome and maqueiro.verificar_senha(senha):
                self.__usuarios_autenticados.append(maqueiro)
                return maqueiro
        return None

    def listar_historico_paciente(self, paciente_id):
        historico = [sol for sol in self.__solicitacoes if sol.get_paciente().get_id() == paciente_id]
        return historico


def main():
    sistema = SistemaTransporte()

    # Adicionar maqueiro "Mateus"
    sistema.adicionar_maqueiro(1, "mateus", "123")

    while True:
        try:
            # Autenticar maqueiro
            id_maqueiro = int(input("ID do maqueiro: "))
            nome_maqueiro = input("Nome do maqueiro: ")
            senha_maqueiro = input("Senha do maqueiro: ")

            maqueiro = sistema.autenticar_usuario(id_maqueiro, nome_maqueiro, senha_maqueiro)
            if maqueiro:
                print("Autenticação bem-sucedida!")
                
                while True:
                    print("\nMenu:")
                    print("1. Adicionar Paciente")
                    print("2. Criar Solicitação de Transporte")
                    print("3. Listar Solicitações Pendentes")
                    print("4. Listar Todas as Solicitações")
                    print("5. Aceitar Solicitação")
                    print("6. Recusar Solicitação")
                    print("7. Registrar Incidente")
                    print("8. Ver Histórico de Solicitações de um Paciente")
                    print("9. Verificar Histórico de Novo Paciente")
                    print("10. Listar Pacientes")
                    print("11. Sair")
                    
                    try:
                        opcao = int(input("Escolha uma opção: "))
                        
                        if opcao == 1:
                            id_paciente = int(input("ID do paciente: "))
                            nome_paciente = input("Nome do paciente: ")
                            localizacao_paciente = input("Localização do paciente: ")
                            prioridade_paciente = input("Prioridade do paciente: ")
                            paciente = sistema.adicionar_paciente(id_paciente, nome_paciente, localizacao_paciente, prioridade_paciente)
                            print("Paciente adicionado com sucesso!")
                            
                        elif opcao == 2:
                            id_paciente = int(input("ID do paciente para solicitação: "))
                            paciente = sistema.buscar_paciente(id_paciente)
                            if paciente:
                                sistema.criar_solicitacao(paciente)
                                print("Solicitação de transporte criada com sucesso!")
                            else:
                                print("Paciente não encontrado!")
                                
                        elif opcao == 3:
                            solicitacoes_pendentes = sistema.listar_solicitacoes_pendentes()
                            if solicitacoes_pendentes:
                                for solicitacao in solicitacoes_pendentes:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhuma solicitação pendente.")
                                
                        elif opcao == 4:
                            solicitacoes = sistema.listar_todas_solicitacoes()
                            if solicitacoes:
                                for solicitacao in solicitacoes:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhuma solicitação encontrada.")
                                
                        elif opcao == 5:
                            id_solicitacao = int(input("ID da solicitação para aceitar: "))
                            solicitacao = next((s for s in sistema.listar_todas_solicitacoes() if s.get_id() == id_solicitacao), None)
                            if solicitacao:
                                maqueiro.aceitar_solicitacao(solicitacao)
                                print("Solicitação aceita com sucesso!")
                            else:
                                print("Solicitação não encontrada!")
                                
                        elif opcao == 6:
                            id_solicitacao = int(input("ID da solicitação para recusar: "))
                            solicitacao = next((s for s in sistema.listar_todas_solicitacoes() if s.get_id() == id_solicitacao), None)
                            if solicitacao:
                                maqueiro.recusar_solicitacao(solicitacao)
                                print("Solicitação recusada com sucesso!")
                            else:
                                print("Solicitação não encontrada!")
                                
                        elif opcao == 7:
                            id_paciente = int(input("ID do paciente para registrar incidente: "))
                            descricao_incidente = input("Descrição do incidente: ")
                            solicitacao = next((s for s in sistema.listar_todas_solicitacoes() if s.get_paciente().get_id() == id_paciente), None)
                            if solicitacao:
                                maqueiro.registrar_incidente(solicitacao, descricao_incidente)
                                print("Incidente registrado com sucesso!")
                            else:
                                print("Solicitação não encontrada!")
                                
                        elif opcao == 8:
                            id_paciente = int(input("ID do paciente para ver histórico: "))
                            historico = sistema.listar_historico_paciente(id_paciente)
                            if historico:
                                for solicitacao in historico:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} em {solicitacao.get_data_hora()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhum histórico encontrado para o paciente.")
                        
                        elif opcao == 9:
                            id_paciente = int(input("ID do paciente para verificar histórico: "))
                            historico = sistema.listar_historico_paciente(id_paciente)
                            if historico:
                                for solicitacao in historico:
                                    print(f"Solicitação para o paciente {solicitacao.get_paciente().get_nome()} em {solicitacao.get_data_hora()} está {solicitacao.get_status()}.")
                            else:
                                print("Nenhum histórico encontrado para o paciente.")
                                
                        elif opcao == 10:
                            sistema.listar_pacientes()
                            
                        elif opcao == 11:
                            print("Saindo do sistema...")
                            break
                            
                        else:
                            print("Opção inválida!")
                    except ValueError:
                        print("Entrada inválida! Por favor, insira um número.")
            else:
                print("Falha na autenticação!")
        except ValueError:
            print("Entrada inválida! Por favor, insira um número.")


if __name__ == "__main__":
    main()
